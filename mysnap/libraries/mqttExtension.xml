<blocks app="Snap! 7, https://snap.berkeley.edu" version="2"><palette><category name="MQTT" color="0,116,143,1"/></palette><block-definition s="$cloudOutline MQTT connect to %&apos;broker&apos; $nl ${options-1-192-192-192 %&apos;username&apos; %&apos;password&apos; %&apos;connection callback&apos; %&apos;keepalive&apos; $}-1-192-192-192" type="command" category="MQTT"><comment x="0" y="0" w="416.6666666666666" collapsed="false">Connect to a broker&#xD;&#xD;The options are not required but can be filled if needed&#xD;&#xD;1. username (some brokers need this)&#xD;2. password (some brokers need this)&#xD;3. connection callback (ringed set of scripts to be run when connection is made or remade)&#xD;4. keepalive (default time is 60 seconds but some brokers need a shorter time)&#xD;&#xD;</comment><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input><input type="%s"></input><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>https://unpkg.com/mqtt@4.2.5/dist/mqtt.js</l></list></block><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/mqttExtension.js</l></list></block><block s="doDeclareVariables"><list><l>connection status</l></list></block><block s="doSetVar"><l>connection status</l><l>connecting</l></block><block s="doApplyExtension"><l>mqt_connect(broker,options)</l><list><block var="broker"/><block s="reportListAttribute"><l><option>json</option></l><block s="reportNewList"><list><block s="reportNewList"><list><l>username</l><block var="username"/></list></block><block s="reportNewList"><list><l>password</l><block var="password"/></list></block><block s="reportNewList"><list><l>keepalive</l><block var="keepalive"/></list></block></list></block></block></list></block><block s="doWaitUntil"><block s="reportNot"><block s="reportEquals"><block var="connection status"/><l>connecting</l></block></block></block><block s="doIfElse"><block s="reportNot"><block s="reportEquals"><block var="connection status"/><l>connected</l></block></block><script><block s="doApplyExtension"><l>err_error(msg)</l><list><block var="connection status"/></list></block></script><script><block s="doIf"><block s="reportNotEquals"><block var="connection callback"/><l></l></block><script><block s="doRun"><block var="connection callback"/><list><block var="connection status"/></list></block></script></block></script></block></script><scripts><script x="584" y="960.8000000000002"><block s="doSayFor"><block var="connection status"/><l>2</l></block></script><script x="584" y="1032.3000000000004"><block s="doSayFor"><l>there&apos;s been an issue</l><l>2</l></block></script><script x="569" y="240.3"><block s="doRun"><block s="reportJSFunction"><list><l>broker</l><l>options</l><l>proc</l></list><l>        /* original code from github.com/pixavier/mqtt4snap  */&#xD;        /* adapted into extension by cymplecy 26Nov21 */&#xD;        /* modified to add in keepalive parameter by cymplecy 23Nov21 */&#xD;&#xD;        broker = broker ? broker.trim() : broker;&#xD;&#xD;        options = JSON.parse(options);&#xD;        const opts = {};&#xD;        if (options[&apos;username&apos;]) {&#xD;            opts.username = options[&apos;username&apos;];&#xD;            if (options["password"]) {&#xD;                opts.password = options[&apos;password&apos;];&#xD;            } else {&#xD;                opts.password = &apos;&apos;;&#xD;            }&#xD;        }&#xD;        if (options["keepalive"]) {&#xD;            opts.keepalive = Number(options["keepalive"]);&#xD;        }&#xD;&#xD;        var stage = this.parentThatIsA(StageMorph);&#xD;&#xD;        if (!(&apos;mqtt&apos; in stage)){&#xD;            stage.mqtt = [];&#xD;        }&#xD;&#xD;        let wsbroker;&#xD;        if (broker.startsWith(&apos;ws://&apos;)) {&#xD;            wsbroker = broker;&#xD;        } else if (broker.startsWith(&apos;wss://&apos;)) {&#xD;            wsbroker = broker;&#xD;        } else {&#xD;            let prefix;&#xD;            prefix = window.location.protocol == &apos;https:&apos;?&apos;wss&apos;:&apos;ws&apos;;&#xD;            wsbroker = prefix + &apos;://&apos; + broker;&#xD;        }&#xD;&#xD;        try {&#xD;            stage.mqtt[broker].end();&#xD;        } catch (e){}&#xD;&#xD;        delete stage.mqtt[broker];&#xD;&#xD;        stage.mqtt[broker] = mqtt.connect(wsbroker, opts);&#xD;&#xD;        stage.mqtt[broker].on(&apos;connect&apos;, function(connack) {&#xD;            proc.doSetVar(&apos;connection status&apos;, &apos;connected&apos;);&#xD;            console.log(&apos;Connected to &apos; + wsbroker);&#xD;        });&#xD;&#xD;        stage.mqtt[broker].on(&apos;error&apos;, function(error) {&#xD;            proc.doSetVar(&apos;connection status&apos;, error);&#xD;            try {&#xD;                stage.mqtt[broker].end();&#xD;            } catch(e) {}&#xD;            delete stage.mqtt[broker];&#xD;        //  alert(error.message);&#xD;        });</l></block><list><block var="broker"/><block s="reportListAttribute"><l><option>json</option></l><block s="reportNewList"><list><block s="reportNewList"><list><l>username</l><block var="username"/></list></block><block s="reportNewList"><list><l>password</l><block var="password"/></list></block><block s="reportNewList"><list><l>keepalive</l><block var="keepalive"/></list></block></list></block></block></list></block><block s="doWaitUntil"><block s="reportNot"><block s="reportEquals"><block var="connection status"/><l>connecting</l></block></block></block><block s="doIfElse"><block s="reportNot"><block s="reportEquals"><block var="connection status"/><l>connected</l></block></block><script><block s="doApplyExtension"><l>err_error(msg)</l><list><block var="connection status"/></list></block></script><script><block s="doIf"><block s="reportNotEquals"><block var="connection callback"/><l></l></block><script><block s="doRun"><block var="connection callback"/><list><block var="connection status"/></list></block></script></block></script></block></script></scripts></block-definition><block-definition s="$cloudOutline MQTT publish to %&apos;broker&apos; topic %&apos;topic&apos; payload %&apos;payload&apos; $nl ${options-1-192-192-192 %&apos;qos&apos; %&apos;retain&apos; $}-1-192-192-192" type="command" category="MQTT"><comment w="200" collapsed="false">Publish a message to an MQTT broker&#xD;&#xD;The options are not required but can be filled if needed&#xD;&#xD;1. qos (quality of service 0,1 or 2)&#xD;2. retain flag (boolean)&#xD;</comment><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input><input type="%s">topicName</input><input type="%s">Hello</input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>https://unpkg.com/mqtt@4.2.5/dist/mqtt.js</l></list></block><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/mqttExtension.js</l></list></block><block s="doIf"><block s="reportIsA"><block var="payload"/><l><option>list</option></l></block><script><block s="doSetVar"><l>payload</l><block s="reportListAttribute"><l><option>json</option></l><block var="payload"/></block></block></script></block><block s="doIf"><block s="reportIsA"><block var="payload"/><l><option>number</option></l></block><script><block s="doSetVar"><l>payload</l><block s="reportJoinWords"><list><block var="payload"/></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="qos"/><l></l></block><script><block s="doSetVar"><l>qos</l><l>0</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="retain"/><l></l></block><script><block s="doSetVar"><l>retain</l><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block><block s="doApplyExtension"><l>mqt_pub(broker,topic,payload,options)</l><list><block var="broker"/><block var="topic"/><block var="payload"/><block s="reportListAttribute"><l><option>json</option></l><block s="reportNewList"><list><block s="reportNewList"><list><l>qos</l><block var="qos"/></list></block><block s="reportNewList"><list><l>retain</l><block var="retain"/></list></block></list></block></block></list></block></script><scripts><script x="460" y="388.99999999999994"><block s="doRun"><block s="reportJSFunction"><list><l>broker</l><l>topic</l><l>payload</l><l>options</l></list><l>        /* original code from github.com/pixavier/mqtt4snap  */&#xD;        /* adapted into extension by cymplecy 26Nov21 */&#xD;        /* modified 5 Sep2021 by cymplecy to add parameters for qos and retain flag */&#xD;&#xD;        broker = broker ? broker.trim() : broker;&#xD;        topic = topic ? topic.trim() : topic;&#xD;        //payload not trimmed as might have real leading/trailing spaces&#xD;&#xD;        const parameters = JSON.parse(options);&#xD;        const opts = {};&#xD;&#xD;        if (parameters[&apos;qos&apos;]) {&#xD;            opts.qos = Number(parameters[&apos;qos&apos;]);&#xD;        }&#xD;&#xD;        if (parameters["retain"]) {&#xD;            opts.retain = parameters["retain"];&#xD;        }&#xD;                &#xD;        let stage =  this.parentThatIsA(StageMorph);&#xD;&#xD;        if (!(&apos;mqtt&apos; in stage)){&#xD;            throw new Error(&apos;No connection to broker &apos; + broker);&#xD;        }&#xD;&#xD;        if(!stage.mqtt[broker]){&#xD;            throw new Error(&apos;No connection to broker &apos; + broker);&#xD;        }&#xD;&#xD;        let prefix = window.location.protocol == &apos;https:&apos;?&apos;wss&apos;:&apos;ws&apos;;&#xD;        let wsbroker = prefix+&apos;://&apos;+broker;&#xD;&#xD;&#xD;        try{&#xD;            let client = stage.mqtt[broker];&#xD;            client.publish(topic, &apos;&apos; + payload, opts);&#xD;        } catch(e) {&#xD;        //  console.log(e);&#xD;            throw e;&#xD;        }</l></block><list><block var="broker"/><block var="topic"/><block var="payload"/><block s="reportListAttribute"><l><option>json</option></l><block s="reportNewList"><list><block s="reportNewList"><list><l>qos</l><block var="qos"/></list></block><block s="reportNewList"><list><l>retain</l><block var="retain"/></list></block></list></block></block></list></block></script></scripts></block-definition><block-definition s="$cloudOutline MQTT subscribe to %&apos;broker&apos; topic %&apos;topic&apos; %&apos;callback&apos;" type="command" category="MQTT"><comment x="0" y="0" w="216.9999999999999" collapsed="false">Subscribe to a topic on a broker&#xD;&#xD;Make sure you have already run an MQTT connect block before using this one&#xD;&#xD;You should add a script to be run inside he grey ring.&#xD;&#xD;It will be run each time a message is received&#xD;&#xD;If you click on the arrow on the grey ring twice, you can use #1 and #2 inside yoiru script.&#xD;&#xD;#1 will contain the payload&#xD;&#xD;#2 will contain the topic name</comment><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input><input type="%s">topicName</input><input type="%cmdRing"></input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>https://unpkg.com/mqtt@4.2.5/dist/mqtt.js</l></list></block><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/mqttExtension.js</l></list></block><block s="doApplyExtension"><l>mqt_sub(broker,topic,callback)</l><list><block var="broker"/><block var="topic"/><block var="callback"/></list></block></script><scripts><script x="486" y="256.6666666666667"><block s="doRun"><block s="reportJSFunction"><list><l>broker</l><l>topic</l><l>callback</l></list><l>        /* github.com/pixavier/mqtt4snap  */&#xD;        /* adapted into extension by cymplecy 26Nov21 */&#xD;&#xD;        broker = broker ? broker.trim() : broker;&#xD;        topic = topic ? topic.trim() : topic;&#xD;&#xD;        let stage =  this.parentThatIsA(StageMorph);&#xD;&#xD;        if (!(&apos;mqtt&apos; in stage)){throw new Error(&apos;No connection to broker &apos;+broker);}&#xD;&#xD;        let prefix = window.location.protocol == &apos;https:&apos;?&apos;wss&apos;:&apos;ws&apos;;&#xD;        let wsbroker = prefix+&apos;://&apos;+broker;&#xD;&#xD;        if (stage.mqtt[broker]) {&#xD;            try {stage.mqtt[broker].unsubscribe(topic);}catch(e){}&#xD;        } else {&#xD;            //throw new Error(&apos;No connection to broker &apos;+broker);&#xD;        }&#xD;        console.log(stage.mqtt);&#xD;        stage.mqtt[broker].subscribe(topic);&#xD;&#xD;        let mqttListener = function (aTopic, payload) {	&#xD;        //  if (aTopic !== topic) { return; }&#xD;          if (!mqttWildcard(aTopic, topic)) {return;}&#xD;          let p = new Process();&#xD;          try {&#xD;              p.initializeFor(callback, new List([payload.toString() , aTopic]));&#xD;          } catch(e) {&#xD;              p.initializeFor(callback, new List([]));&#xD;          }&#xD;          stage.threads.processes.push(p);&#xD;        };&#xD;&#xD;        stage.mqtt[broker].on(&apos;message&apos;, mqttListener);&#xD;&#xD;        let mqttWildcard = function (topic, wildcard) {&#xD;            if (topic === wildcard) {return true;} &#xD;            else if (wildcard === &apos;#&apos;) {return true;}&#xD;&#xD;            var res = [];&#xD;            var t = String(topic).split(&apos;/&apos;);&#xD;            var w = String(wildcard).split(&apos;/&apos;);&#xD;            var i = 0;&#xD;            for (var lt = t.length; i &lt; lt; i++) {&#xD;                if (w[i] === &apos;+&apos;) {&#xD;                    res.push(t[i]);&#xD;                } else if (w[i] === &apos;#&apos;) {&#xD;                    res.push(t.slice(i).join(&apos;/&apos;));&#xD;                    return true;&#xD;                } else if (w[i] !== t[i]) {&#xD;                    return false;&#xD;                }&#xD;            }&#xD;            if (w[i] === &apos;#&apos;) {i += 1;}&#xD;            return (i === w.length) ? true : false;&#xD;        }</l></block><list><block var="broker"/><block var="topic"/><block var="callback"/></list></block></script></scripts></block-definition><block-definition s="$cloudOutline MQTT unsubscribe from %&apos;broker&apos; %&apos;topic&apos;" type="command" category="MQTT"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input><input type="%s">topicName</input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>https://unpkg.com/mqtt@4.2.5/dist/mqtt.js</l></list></block><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/mqttExtension.js</l></list></block><block s="doApplyExtension"><l>mqt_unsub(broker,topic)</l><list><block var="broker"/><block var="topic"/></list></block></script></block-definition><block-definition s="$cloudOutline MQTT disconnect from %&apos;broker&apos;" type="command" category="MQTT"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>https://unpkg.com/mqtt@4.2.5/dist/mqtt.js</l></list></block><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/mqttExtension.js</l></list></block><block s="doApplyExtension"><l>mqt_disconnect(broker)</l><list><block var="broker"/></list></block></script></block-definition><block-definition s="$cloudOutline MQTT request %&apos;broker&apos; %&apos;topic&apos; %&apos;idCall&apos; %&apos;msg&apos; %&apos;callback&apos;" type="command" category="MQTT"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input><input type="%s">topicName</input><input type="%s">idCall</input><input type="%s">Hello</input><input type="%cmdRing"></input></inputs><script><custom-block s="$cloudOutline MQTT subscribe to %s topic %s %cmdRing"><block var="broker"/><block s="reportJoinWords"><list><l>idCall-</l><block var="idCall"/></list></block><block s="reifyScript"><script><block s="doRun"><block var="callback"/><list><block var="topic"/><block var="payload"/></list></block><custom-block s="$cloudOutline MQTT unsubscribe from %s %s"><block var="broker"/><block s="reportJoinWords"><list><l>idCall-</l><block var="idCall"/></list></block></custom-block></script><list><l>topic</l><l>payload</l></list></block></custom-block></script></block-definition><block-definition s="$cloudOutline MQTT response %&apos;broker&apos; %&apos;topic&apos; %&apos;reply&apos;" type="command" category="MQTT"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input><input type="%s">topicName/#</input><input type="%repRing"></input></inputs><script><block s="doDeclareVariables"><list><l>resp</l><l>callbackTopic</l></list></block><custom-block s="$cloudOutline MQTT subscribe to %s topic %s %cmdRing"><block var="broker"/><block var="topic"/><block s="reifyScript"><script><block s="doSetVar"><l>resp</l><block s="evaluate"><block var="reply"/><list><block var="topic"/><block var="payload"/></list></block></block><block s="doSetVar"><l>callbackTopic</l><block s="reportListItem"><l><option>last</option></l><block s="reportTextSplit"><block var="topic"/><l>/</l></block></block></block><block s="doIf"><block s="reportNot"><block s="reportEquals"><block var="callbackTopic"/><block var="topic"/></block></block><script></script></block></script><list><l>topic</l><l>payload</l></list></block></custom-block></script></block-definition><block-definition s="$cloudOutline MQTT example response reporter %&apos;topic&apos; %&apos;msg&apos;" type="reporter" category="MQTT"><header></header><code></code><translations></translations><inputs><input type="%s">topicName</input><input type="%s">msg</input></inputs><script><block s="doReport"><block s="reportJoinWords"><list><l>Echo: </l><block var="msg"/></list></block></block></script></block-definition><block-definition s="$cloudOutline MQTT request %&apos;broker&apos; %&apos;topic&apos; %&apos;idCall&apos; %&apos;msg&apos;" type="reporter" category="MQTT"><header></header><code></code><translations></translations><inputs><input type="%s">mqtt.eclipseprojects.io/mqtt</input><input type="%s">topicName</input><input type="%s">idCall</input><input type="%s">Hello</input></inputs><script><block s="doDeclareVariables"><list><l>resp</l><l>semaphore</l></list></block><block s="doSetVar"><l>semaphore</l><l>0</l></block><custom-block s="$cloudOutline MQTT subscribe to %s topic %s %cmdRing"><block var="broker"/><block s="reportJoinWords"><list><l>idCall-</l><block var="idCall"/></list></block><block s="reifyScript"><script><block s="doSetVar"><l>resp</l><block var="payload"/></block><custom-block s="$cloudOutline MQTT unsubscribe from %s %s"><block var="broker"/><block s="reportJoinWords"><list><l>idCall-</l><block var="idCall"/></list></block></custom-block><block s="doSetVar"><l>semaphore</l><l>1</l></block></script><list><l>topic</l><l>payload</l></list></block></custom-block></script></block-definition></blocks>